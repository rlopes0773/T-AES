name: T-AES CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    name: Build & Test (${{ matrix.os }}, ${{ matrix.implementation }})
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04]
        implementation: [standard, aes-ni]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check AES-NI CPU support
        run: |
          if grep -q aes /proc/cpuinfo; then
            echo "âœ“ AES-NI support detected"
            grep -o aes /proc/cpuinfo | head -1
          else
            echo "âœ— No AES-NI support on this runner"
          fi

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev

      - name: Show compiler version
        run: |
          gcc --version
          openssl version

      - name: Build standard implementation
        if: matrix.implementation == 'standard'
        run: make taes

      - name: Build AES-NI implementation
        if: matrix.implementation == 'aes-ni'
        run: make taes-ni

      - name: Build applications
        run: make apps

      - name: Build tests
        run: make tests

      - name: Run tests
        run: make test
        continue-on-error: true

      - name: Run basic AES tests
        run: make test-basic
        continue-on-error: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: taes-binaries-${{ matrix.os }}-${{ matrix.implementation }}
          path: |
            build/*.o
            apps/encrypt
            apps/decrypt
            apps/speed
            apps/stat
            tests/test_taes
            tests/test_basic_aes
          retention-days: 7

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install analysis tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev cppcheck valgrind

      - name: Run cppcheck static analysis
        run: |
          echo "Running cppcheck on source files..."
          cppcheck --enable=all --inconclusive --std=c11 \
            -I include \
            src/ apps/ tests/ \
            --suppress=missingIncludeSystem \
            --suppress=unusedFunction \
            2>&1 | tee cppcheck-report.txt
        continue-on-error: true

      - name: Check compilation warnings
        run: |
          echo "Building with all warnings enabled..."
          make clean
          make CFLAGS="-Wall -Wextra -Wpedantic -O2 -std=c11 -Iinclude" 2>&1 | tee build-warnings.txt
        continue-on-error: true

      - name: Build for memory testing
        run: |
          make clean
          make CFLAGS="-Wall -Wextra -O0 -g -std=c11 -Iinclude"

      - name: Run valgrind memory checks
        run: |
          echo "Running valgrind on test suite..."
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes \
            --error-exitcode=1 ./tests/test_taes 2>&1 | tee valgrind-report.txt
        continue-on-error: true

      - name: Upload quality reports
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-reports
          path: |
            cppcheck-report.txt
            build-warnings.txt
            valgrind-report.txt
          retention-days: 30

  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-22.04
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev

      - name: Check CPU features
        run: |
          echo "CPU Information:"
          lscpu | grep -E "Model name|CPU MHz|Flags"
          echo ""
          echo "AES-NI Support:"
          grep -o aes /proc/cpuinfo | head -1 || echo "Not available"

      - name: Build standard implementation
        run: make taes

      - name: Build AES-NI implementation
        run: make taes-ni

      - name: Build speed benchmark
        run: make apps

      - name: Run benchmark (Standard)
        run: |
          echo "=== T-AES Benchmark (Standard Implementation) ===" | tee benchmark-results.txt
          ./apps/speed 2>&1 | tee -a benchmark-results.txt
        continue-on-error: true

      - name: Rebuild with AES-NI
        run: |
          make clean
          make taes-ni
          make apps

      - name: Run benchmark (AES-NI)
        run: |
          echo "" | tee -a benchmark-results.txt
          echo "=== T-AES Benchmark (AES-NI Implementation) ===" | tee -a benchmark-results.txt
          ./apps/speed 2>&1 | tee -a benchmark-results.txt
        continue-on-error: true

      - name: Run statistical analysis
        run: |
          echo "" | tee -a benchmark-results.txt
          echo "=== Statistical Analysis ===" | tee -a benchmark-results.txt
          ./apps/stat 2>&1 | tee -a benchmark-results.txt
        continue-on-error: true

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: performance-benchmarks
          path: benchmark-results.txt
          retention-days: 90

      - name: Comment benchmark results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = fs.readFileSync('benchmark-results.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## ðŸš€ Performance Benchmark Results\n\n```\n' + results + '\n```'
            });
        continue-on-error: true

  summary:
    name: CI Summary
    runs-on: ubuntu-22.04
    needs: [build-and-test, code-quality, benchmarks]
    if: always()

    steps:
      - name: Check job results
        run: |
          echo "Build & Test: ${{ needs.build-and-test.result }}"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Benchmarks: ${{ needs.benchmarks.result }}"

      - name: Report status
        run: |
          if [ "${{ needs.build-and-test.result }}" == "success" ]; then
            echo "âœ“ All builds and tests passed"
            exit 0
          else
            echo "âœ— Some builds or tests failed"
            exit 1
          fi
